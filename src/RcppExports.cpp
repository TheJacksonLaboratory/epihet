// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// MethClone_one_sample
int MethClone_one_sample(std::string bamFile1, const char * outFile, std::string sample, int d, int freq);
RcppExport SEXP _epihet_MethClone_one_sample(SEXP bamFile1SEXP, SEXP outFileSEXP, SEXP sampleSEXP, SEXP dSEXP, SEXP freqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type bamFile1(bamFile1SEXP);
    Rcpp::traits::input_parameter< const char * >::type outFile(outFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type sample(sampleSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< int >::type freq(freqSEXP);
    rcpp_result_gen = Rcpp::wrap(MethClone_one_sample(bamFile1, outFile, sample, d, freq));
    return rcpp_result_gen;
END_RCPP
}
// MethClone_two_samples
int MethClone_two_samples(std::string bamFile1, std::string bamFile2, const char * outFile, std::string sample, int d, int freq, int methdiff);
RcppExport SEXP _epihet_MethClone_two_samples(SEXP bamFile1SEXP, SEXP bamFile2SEXP, SEXP outFileSEXP, SEXP sampleSEXP, SEXP dSEXP, SEXP freqSEXP, SEXP methdiffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type bamFile1(bamFile1SEXP);
    Rcpp::traits::input_parameter< std::string >::type bamFile2(bamFile2SEXP);
    Rcpp::traits::input_parameter< const char * >::type outFile(outFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type sample(sampleSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< int >::type freq(freqSEXP);
    Rcpp::traits::input_parameter< int >::type methdiff(methdiffSEXP);
    rcpp_result_gen = Rcpp::wrap(MethClone_two_samples(bamFile1, bamFile2, outFile, sample, d, freq, methdiff));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_epihet_MethClone_one_sample", (DL_FUNC) &_epihet_MethClone_one_sample, 5},
    {"_epihet_MethClone_two_samples", (DL_FUNC) &_epihet_MethClone_two_samples, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_epihet(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
